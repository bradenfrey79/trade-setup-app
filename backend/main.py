-e import os\nfrom fastapi import FastAPI, HTTPException\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom pydantic import BaseModel\nfrom alpha_vantage.timeseries import TimeSeries\nimport pandas as pd\nfrom datetime import datetime\nimport uuid\nfrom dotenv import load_dotenv\n\nload_dotenv()\napp = FastAPI()\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=["*"],\n    allow_credentials=True,\n    allow_methods=["*"],\n    allow_headers=["*"],\n)\n\nts = TimeSeries(key=os.getenv("ALPHA_VANTAGE_API_KEY"), output_format="pandas")\n\nclass TradeSetupRequest(BaseModel):\n    symbol: str\n    trade_purpose: str\n\nTIMEFRAME_MAP = {\n    "Monthly": {"HTF": "monthly", "ITF": "weekly", "LTF": "daily"},\n    "Weekly": {"HTF": "weekly", "ITF": "daily", "LTF": "intraday"},\n    "Daily": {"HTF": "daily", "ITF": "intraday", "LTF": "intraday"},\n    "Hourly": {"HTF": "intraday", "ITF": "intraday", "LTF": "intraday"}\n}\nRESOLUTION_MAP = {\n    "Monthly": {"LTF": None},\n    "Weekly": {"LTF": "60min"},\n    "Daily": {"ITF": "60min", "LTF": "15min"},\n    "Hourly": {"HTF": "60min", "ITF": "15min", "LTF": "5min"}\n}\n\n@app.post("/trade_setups")\nasync def get_trade_setups(request: TradeSetupRequest):\n    try:\n        timeframes = TIMEFRAME_MAP[request.trade_purpose]\n        resolutions = RESOLUTION_MAP[request.trade_purpose]\n        data = {}\n        for tf_key, resolution in timeframes.items():\n            kwargs = {"interval": resolutions.get(tf_key)} if tf_key in resolutions and resolutions[tf_key] else {}\n            df, _ = ts.get_symbol_time_series(request.symbol, resolution, **kwargs)\n            data[tf_key] = df\n\n        setups = []\n        for tf_key, df in data.items():\n            zones = identify_zones(df)\n            for zone in zones:\n                odds_enhancers = calculate_odds_enhancers(zone, df, data.get("HTF", df))\n                if odds_enhancers["total_score"]                     setups.append({\n                        "tradeId": str(uuid.uuid4()),\n                        "tradePurpose": request.trade_purpose,\n                        "zoneType": zone["type"],\n                        "htfTrend": determine_trend(data.get("HTF", df)),\n                        "ltfTrend": determine_trend(data.get("LTF", df)),\n                        "curvePosition": calculate_curve_position(zone, data.get("HTF", df)),\n                        "action": determine_action(zone, data.get("HTF", df), data.get("LTF", df)),\n                        "oddsEnhancerScore": odds_enhancers["total_score"],\n                        "strengthScore": odds_enhancers["strength"],\n                        "freshnessScore": odds_enhancers["freshness"],\n                        "timeScore": odds_enhancers["time"],\n                        "trendScore": odds_enhancers["trend"],\n                        "curveScore": odds_enhancers["curve"],\n                        "profitZoneScore": odds_enhancers["profit_zone"],\n                        "entryPrice": zone["proximal_price"],\n                        "stopLoss": zone["distal_price"],\n                        "targetPrice": calculate_target_price(zone),\n                        "timestamp": datetime.now().isoformat()\n                    })\n\n        return setups\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))\n\ndef identify_zones(df):\n    return [{"type": "Demand", "proximal_price": df["4. close"].iloc[-1], "distal_price": df["4. close"].iloc[-1] - 1.0}]\n\ndef calculate_odds_enhancers(zone, tf_df, htf_df):\n    return {\n        "total_score": 8,\n        "strength": 2,\n        "freshness": 2,\n        "time": 1,\n        "trend": 2,\n        "curve": 1,\n        "profit_zone": 0\n    }\n\ndef determine_trend(df):\n    return "Uptrend"\n\ndef calculate_curve_position(zone, htf_df):\n    return "Middle"\n\ndef determine_action(zone, htf_df, ltf_df):\n    return "Long"\n\ndef calculate_target_price(zone):\n    return zone["proximal_price"] + 5.0 
